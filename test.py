import math, numpy

a = [  8.49067670e+04 ,  4.47498089e+05 , -1.00000000e-02] 
b = [  8.49067570e+04 ,  4.47498085e+05 , -1.00000000e-02] 
c = [  8.49067620e+04 ,  4.47498087e+05 , -1.00000000e-02]

a = [  8.50544320e+04,   4.47444922e+05,   2.00000000e-01]
b = [  8.50544320e+04,   4.47444921e+05,   2.00000000e-01]
c = [  8.50544330e+04,   4.47444922e+05,   2.00000000e-01]

#a = [  8.50123430e+04 ,  4.47455577e+05 ,  2.00000000e-01] 
#b = [  8.50118542e+04 ,  4.47455719e+05 ,  2.10000000e-01] 
#c = [  8.50123430e+04 ,  4.47455577e+05 ,  2.10000000e-01]


def calcarea(a, b, c):
	x0 = a[0]
	y0 = a[1]
	x1 = b[0]
	y1 = b[1]
	x2 = c[0]
	y2 = c[1]
	return -((x1*y0-x0*y1) + (x2*y1-x1*y2) + (x0*y2-x2*y0))/2.0000

def calcnormal(a,b,c):
		U = [0,0,0]
		V = [0,0,0]
		N = [0,0,0]
		U[0]=b[0]*100000e10 - a[0]*100000e10
		U[1]=b[1]*100000e10 - a[1]*100000e10
		U[2]=b[2]*100000e10 - a[2]*100000e10
		         
		V[0]=c[0]*100000e10 - a[0]*100000e10
		V[1]=c[1]*100000e10 - a[1]*100000e10
		V[2]=c[2]*100000e10 - a[2]*100000e10
		
		N[0]=U[1]*V[2] - U[2]*V[1]
		N[1]=U[2]*V[0] - U[0]*V[2]
		N[2]=U[0]*V[1] - U[1]*V[0]
		factor = math.sqrt(N[0]**2 + N[1]**2 + N[2]**2)
		print a,b,c
		print U
		print V
		print N
		print factor
		print '-----'
		return (N[0]/factor,N[1]/factor,N[2]/factor)	
	
a = [  8.49067190e+04   ,4.47498081e+05  ,-1.00000000e-02] 
b = [  8.49067090e+04   ,4.47498083e+05  ,-1.00000000e-02] 
c = [  8.49067140e+04   ,4.47498082e+05  ,-1.00000000e-02]

a = [  8.50544319e+04,   4.47444922e+05,   2.00000000e-01]
b = [  8.50544319e+04,   4.47444921e+05,   2.00000000e-01] 
c = [  8.50544329e+04,   4.47444922e+05,   2.00000000e-01]

print 'area: ',calcarea(a,b,c)
print 'normal: ',calcnormal(a,b,c)









